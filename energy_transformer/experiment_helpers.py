# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/06_Experiment Helpers.ipynb (unless otherwise specified).

__all__ = ['show_predictions', 'img_results_for_logging']

# Cell
import torch
import numpy as np
import jax.numpy as jnp
from .datasets import Patcher, imagenet_unnormalize_image
from typing import *
from torchvision.utils import make_grid
from einops import rearrange

def show_predictions(
    patcher:Patcher,
    imgs:List[jnp.ndarray],
    nv=16,
    nrow=None
):
    """Turn patchified predictions into image grid"""
    imgs = [
        torch.tensor(np.array(imagenet_unnormalize_image(patcher.unpatchify(x[:nv]))))
        for x in imgs # HWC images
    ]
    if nrow is None:
        nrow = int(np.ceil(np.sqrt(len(imgs[0]))))

    plot_img = make_grid(
        rearrange(imgs, "s b h w c -> b c h (s w)"),
        nrow=nrow,
        normalize=False,
    )
    return plot_img

def img_results_for_logging(predictfn, patcher:Patcher, batch, nv=16, nrow=None):
    """Usage:
    model = ...
    batch = ... #(img, mask, label)

    writer = SummaryWriter("text_exp5")
    predgrid = img_results_for_logging(model.predict, model.patcher, batch)
    writer.add_image("Preds", predgrid, 0)
    """
    img, mask, label = batch
    img, mask = img[:nv], mask[:nv]
    yhat = predictfn(img, mask) # everything reconstructed
    pred_grid = _img_results_for_logging(patcher, img, mask, yhat, nv=nv, nrow=nrow)
    return pred_grid

def _img_results_for_logging(patcher:Patcher, img, mask, yhat, nv=16, nrow=None):
    img, mask, yhat = img[:nv], mask[:nv], yhat[:nv]
    masked_img_tokens = jnp.einsum("bnchw,bn->bnchw", img, mask!=1) # Show input to model
    reconstructed_patches_only = jnp.einsum("bnchw,bn->bnchw", yhat, mask>0) # Only show decodings
    given_patches = mask==0
    new_info = yhat.at[given_patches].set(img[given_patches])
    pred_grid = show_predictions(patcher, [masked_img_tokens, yhat, reconstructed_patches_only, new_info, img], nv=nv, nrow=nrow)
    return pred_grid